entity Organization{
  uuid UUID required,
    permalink String required,
    name String required,
    alsoknownas String,
    shortdescription String,
    description String,
    profileimageid Integer,
    primaryrole String,
    rolecompany Boolean,
    roleinvestor Boolean,
    rolegroup Boolean,
    roleschool Boolean,
    foundedon Date ,
    foundedontrustcode Integer,
    closedon Date ,
    closedontrustcode Integer,
    numemployeesmin Integer,
    numemployeesmax Integer,
    totalfundingusd Integer,
    totalfundingvnd Integer,
    stockexchange String,
    stocksymbol String,
    numberofinvestments Integer,
    createdat Date ,
    updatedat Date ,
    permalinkaliases String,
    investortype String,
    contactemail String,
    phonenumber String,
    rank Integer,
    primaryimageid Integer,
    ownedbyid Integer,
    headquartersid Integer,
    acquiredbyid Integer,
    ipoid Integer,
    domain String,
    homepageurl String,
    facebookurl String,
    twitterurl String,
    linkedinurl String,
    cityname String,
    regionname String,
    countrycode String
}

entity Person{
  uuid UUID required,
    permalink String required,
    firstname String required,
    lastname String required,
    alsoknownas String,
    bio String,
    profileimageid Integer,
    roleinvestor Boolean,
    bornon Date ,
    bornontrustcode Integer,
    diedon Date ,
    diedontrustcode Integer,
    createdat Date ,
    updatedat Date ,
    permalinkaliases String,
    gender String,
    rank Integer,
    primaryaffiliationid Integer,
    primarylocationid Integer,
    primaryimageid Integer,
    title String,
    homepageurl String,
    facebookurl String,
    twitterurl String,
    linkedinurl String,
    cityname String,
    regionname String,
    countrycode String
}

entity OrganizationEmployee{
 role String
}
relationship OneToMany{
 OrganizationEmployee{organization} to Organization,
 OrganizationEmployee{person} to Person,
}

relationship OneToMany{
 Organization{owner} to Person
}

entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
	hireDate Instant,
	salary Long,
	commissionPct Long
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}

enum Language {
    FRENCH, ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee{job} to Job,
	/**
	* A relationship
	*/
	Department{employee} to
	/**
	* Another side of the same relationship
	*/
	Employee
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
